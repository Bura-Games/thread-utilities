{
	"Luau Class": {
		"body": [
			"--!optimize 2",
			"",
			"export type ${1:$TM_FILENAME_BASE} = {",
			"\tDestroy: (self: ${1:$TM_FILENAME_BASE}) -> (),",
			"}",
			"type Static = {",
			"\tClassName: \"${1:$TM_FILENAME_BASE}\",",
			"\tnew: () -> ${1:$TM_FILENAME_BASE},",
			"\tIs: (value: any) -> boolean,",
			"\tinstanceof: (value: any) -> boolean,",
			"}",
			"type PrivateStatic = Static & {",
			"\t__tostring: (self: ${1:$TM_FILENAME_BASE}) -> string,",
			"}",
			"",
			"--[=[",
			"\t@class ${1:$TM_FILENAME_BASE}",
			"]=]",
			"local ${1:$TM_FILENAME_BASE} = {} :: ${1:$TM_FILENAME_BASE} & Static",
			"local Private = ${1:$TM_FILENAME_BASE} :: ${1:$TM_FILENAME_BASE} & PrivateStatic",
			"${1:$TM_FILENAME_BASE}.ClassName = \"${1:$TM_FILENAME_BASE}\"",
			"(${1:$TM_FILENAME_BASE} :: any).__index = ${1:$TM_FILENAME_BASE}",
			"",
			"--[=[",
			"\tCreates a new ${1:$TM_FILENAME_BASE}.",
			"\t@return ${1:$TM_FILENAME_BASE}",
			"]=]",
			"function ${1:$TM_FILENAME_BASE}.new()",
			"\tlocal self: ${1:$TM_FILENAME_BASE} = setmetatable({}, ${1:$TM_FILENAME_BASE}) :: never",
			"\treturn self",
			"end",
			"",
			"--[=[",
			"\tChecks if the given value is a ${1:$TM_FILENAME_BASE}.",
			"\t@param value any -- The value to check.",
			"\t@return boolean -- Whether or not the value is a ${1:$TM_FILENAME_BASE}.",
			"]=]",
			"function ${1:$TM_FILENAME_BASE}.Is(value)",
			"\treturn type(value) == \"table\" and getmetatable(value) == ${1:$TM_FILENAME_BASE}",
			"end",
			"${1:$TM_FILENAME_BASE}.instanceof = ${1:$TM_FILENAME_BASE}.Is",
			"",
			"--[=[",
			"\tDestroys the object and renders it completely unusable.",
			"]=]",
			"function ${1:$TM_FILENAME_BASE}:Destroy()",
			"\ttable.clear(self)",
			"\tsetmetatable(self, nil)",
			"end",
			"",
			"function Private:__tostring()",
			"\treturn \"${1:$TM_FILENAME_BASE}\"",
			"end",
			"",
			"return table.freeze(${1:$TM_FILENAME_BASE} :: Static)",
			"",
		],
		"description": "Luau Class template",
		"prefix": ["luauclass", "class"],
		"scope": "lua,luau",
	},

	"GreenTeaMatcher": {
		"body": [
			"local typeSuccess$1, typeError$1 = ${2:IsString}:matches(${3:value})",
			"if not typeSuccess$1 then",
			"\terror(typeError$1)",
			"end",
		],
		"description": "Matches with a GreenTea matcher.",
		"prefix": ["gtmatch"],
		"scope": "lua,luau",
	},
}